// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?  // opcional para login com OAuth
  role          Role     @default(USER)
  dateOfBirth   DateTime?
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  testResults   TestResult[]
  appointments  Appointment[]
  professionalReviews ProfessionalReview[]
  chatMessages  ChatMessage[]
  roomMemberships RoomMembership[]
  subscriptions Subscription[]
  createdRooms  ChatRoom[] @relation("RoomCreator")
  
  @@map("users")
}

model Test {
  id            String   @id @default(cuid())
  title         String
  description   String
  category      TestCategory
  instructions  String
  timeLimit     Int?     // em minutos
  isActive      Boolean  @default(true)
  imageUrl      String?  // URL da imagem de destaque
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Campos SEO
  slug          String?  // URL amigável
  metaTitle     String?  // Título para SEO
  metaDescription String? // Descrição para SEO
  keywords      String?  // Palavras-chave
  content       String?  // Conteúdo completo da landing page
  faq           String?  // FAQ em JSON
  howTo         String?  // Instruções em JSON
  lastModified  DateTime @default(now())
  
  // Relacionamentos
  questions     Question[]
  testResults   TestResult[]
  chatRooms     ChatRoom[]
  
  @@map("tests")
}

model Question {
  id          String   @id @default(cuid())
  testId      String
  text        String
  type        QuestionType
  order       Int
  options     String?  // JSON array para opções de múltipla escolha
  
  // Relacionamentos
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers     Answer[]
  
  @@map("questions")
}

model Answer {
  id          String   @id @default(cuid())
  questionId  String
  testResultId String
  value       String   // resposta do usuário
  score       Int      // pontuação da resposta
  
  // Relacionamentos
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testResult  TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)
  
  @@map("answers")
}

model TestResult {
  id          String   @id @default(cuid())
  userId      String
  testId      String
  totalScore  Int
  category    String   // categoria do resultado (ex: "leve", "moderado", "grave")
  interpretation String // interpretação do resultado
  recommendations String? // recomendações
  completedAt DateTime @default(now())
  
  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers     Answer[]
  professionalReviews ProfessionalReview[]
  
  @@map("test_results")
}

model Professional {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  specialty   String
  credentials String
  bio         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  appointments Appointment[]
  professionalReviews ProfessionalReview[]
  
  @@map("professionals")
}

model Appointment {
  id            String   @id @default(cuid())
  userId        String
  professionalId String
  scheduledFor  DateTime
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  professional  Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  telemedicineSession TelemedicineSession?
  
  @@map("appointments")
}

model ProfessionalReview {
  id          String   @id @default(cuid())
  testResultId String
  professionalId String
  userId      String
  review      String
  recommendations String?
  reviewedAt  DateTime @default(now())
  
  // Relacionamentos
  testResult  TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("professional_reviews")
}

model EducationalResource {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        ResourceType
  category    String
  url         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("educational_resources")
}

// Novos modelos para Comunidade e Assinaturas

model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        RoomType @default(PUBLIC)
  category    String?  // categoria baseada em testes
  testId      String?  // associado a um teste específico
  maxMembers  Int      @default(50)
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  creator     User     @relation("RoomCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  test        Test?    @relation(fields: [testId], references: [id], onDelete: SetNull)
  messages    ChatMessage[]
  memberships RoomMembership[]
  
  @@map("chat_rooms")
}

model ChatMessage {
  id          String   @id @default(cuid())
  roomId      String
  userId      String
  content     String
  type        MessageType @default(TEXT)
  replyToId   String?  // para responder a outras mensagens
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  room        ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo     ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     ChatMessage[] @relation("MessageReplies")
  
  @@map("chat_messages")
}

model RoomMembership {
  id          String   @id @default(cuid())
  roomId      String
  userId      String
  role        RoomRole @default(MEMBER)
  joinedAt    DateTime @default(now())
  lastReadAt  DateTime @default(now())
  isBanned    Boolean  @default(false)
  bannedUntil DateTime?
  
  // Relacionamentos
  room        ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@map("room_memberships")
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  interval    PlanInterval @default(MONTHLY)
  features    String   // JSON array de features
  maxRooms    Int      @default(1)
  maxPrivateRooms Int @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  subscriptions Subscription[]
  
  @@map("subscription_plans")
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  planId      String
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  cancelledAt DateTime?
  autoRenew   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan        SubscriptionPlan @relation(fields: [planId], references: [id])
  
  @@map("subscriptions")
}

model TelemedicineSession {
  id            String   @id @default(cuid())
  appointmentId String   @unique
  professionalId String
  userId        String
  status        SessionStatus @default(WAITING)
  startTime     DateTime?
  endTime       DateTime?
  duration      Int?     // em minutos
  recordingUrl  String?
  quality       Quality  @default(GOOD)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  
  @@map("telemedicine_sessions")
}

// Enums
enum Role {
  USER
  ADMIN
  PROFESSIONAL
  MODERATOR
}

enum TestCategory {
  COMPULSAO_ALIMENTAR
  DEPRESSAO
  DEPRESSAO_MAIOR
  FOBIA_SOCIAL
  INSONIA
  BURNOUT
  ESTRESSE
  SINDROME_IMPOSTOR
  TDAH
  TOC
  TRANSTORNO_AFETIVO_BIPOLAR
  TRANSTORNO_ANSIEDADE
}

enum QuestionType {
  MULTIPLE_CHOICE
  LIKERT_SCALE
  YES_NO
  TEXT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ResourceType {
  ARTICLE
  VIDEO
  PODCAST
  EXERCISE
  TIP
}

// Novos enums para comunidade
enum RoomType {
  PUBLIC
  PRIVATE
  PREMIUM
  MODERATED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  VOICE
}

enum RoomRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  BANNED
}

enum PlanInterval {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum SessionStatus {
  WAITING
  ACTIVE
  ENDED
  FAILED
}

enum Quality {
  POOR
  FAIR
  GOOD
  EXCELLENT
}